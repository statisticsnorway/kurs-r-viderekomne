{
  "hash": "1d5054d5b158bea66ee76734399ca524",
  "result": {
    "markdown": "---\ntitle: \"Funksjoner\"\neditor: visual\n---\n\n\n\n<iframe src=\"https://ssbno.sharepoint.com/sites/S811/_layouts/15/embed.aspx?UniqueId=e4b467c4-5c38-47d8-9561-4398d46ab367&amp;embed=%7B%22ust%22%3Atrue%2C%22hv%22%3A%22CopyEmbedCode%22%7D&amp;referrer=StreamWebApp&amp;referrerScenario=EmbedDialog.Create\" width=\"640\" height=\"360\" frameborder=\"0\" scrolling=\"no\" allowfullscreen title=\"funksjoner.mp4\">\n\n</iframe>\n\n## Hva er en funksjon?\n\nEn funksjon er en kodedel som kan brukes om og om igjen. Den har en input (det som sendes inn til funksjonen) og en output (det som kommer ut).\n\n![](./images/funksjon1.PNG)\n\nEn parameter er tilleggsinformasjon som sendes inn til funksjonen for å spesifisere videre hva funksjonen skal gjøres.\n\n![](./images/funksjon2.PNG)\n\nBruk av funksjoner kan være nyttig for gjenbruk og abstraksjon.\n\n## Lage en enkel funksjon\n\nVi lager en funksjon ved å allokere et navn og spesifisere `function()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmin_func <- function(){\n  print(\"hello\")\n}\n```\n:::\n\n\n\nEtterpå kan vi kjøre funksjonen med:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmin_func()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"hello\"\n```\n:::\n:::\n\n\n\n## Lage en funksjon for fylke\n\nHer skal vi lage en funksjon som kan ta kommunenummer som input og returnere fylkenummer. Vi spesifiserer kommunenummer som en parameter i funksjonen. Vi bruker `substr()` for å plukke ut de første to sifferne.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlage_fylke <- function(kommunenr){\n  substr(kommunenr, 1, 2)\n}\n\nlage_fylke(\"0301\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"03\"\n```\n:::\n:::\n\n\n\nFunksjoner kan gå over flere linjer. Den siste linjen er det som returneres. Hva som returneres kan også spesifiseres med `return()` ved behov, særlig nyttig i komplekse funksjoner med flere output.\n\n## Flere parameter\n\nFunksjoner kan ta mer enn èn paramter. For eksempel i fylke-funksjonen kanskje vi ønsker å sjekke lengden for å se om ledende 0-ere har falt av.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlage_fylke <- function(kommunenr, sjekk_lengde){\n  if(sjekk_lengde == TRUE){\n    kommunenr <- ifelse(nchar(kommunenr) == 3, \n                        paste(\"0\", kommunenr, sep = \"\"), \n                        kommunenr)\n  }\n  fylke <- substr(kommunenr, 1, 2)\n  fylke\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlage_fylke(kommunenr = \"301\", sjekk_lengde = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"03\"\n```\n:::\n\n```{.r .cell-code}\nlage_fylke(kommunenr = \"301\", sjekk_lengde = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"30\"\n```\n:::\n:::\n\n\n\n## Standard/default parameter\n\nVi kan sette standard parameter verdier for å slippe å spesifisere hver gang. For eksemepel, samme funksjon over kan ha `sjekk_lengde=TRUE` som standard parameter.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlage_fylke <- function(kommunenr, sjekk_lengde = TRUE){\n  if(sjekk_lengde == TRUE){\n    kommunenr <- ifelse(nchar(kommunenr) == 3, \n                        paste(\"0\", kommunenr, sep = \"\"), \n                        kommunenr)\n  }\n  fylke <- substr(kommunenr, 1, 2)\n  fylke\n}\n\nlage_fylke(\"301\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"03\"\n```\n:::\n:::\n\n\n\nNoen ganger kalles disse for \"named parameters\" eller \"keyword arguements\". Standard parameter kommer alltid til sist.\n\n## Globalt vs, Lokalt-miljø\n\nNår vi lager en funksjon, lager vi et lite lokalt-miljø. Varaiabler som lagres inn i en funksjon påvirker ikke det globale miljøet og blir slettet når funksjonen er ferdigkjørt. For eksempel, om vi har en enkel funksjon som returnerer verdien av parameter `x` vil ikke dette påvirkes om vi har en x i det globale miljøet:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfuncx <- function(x){\n  x\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 2\nfuncx(x = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\n\n## Varsling i funksjoner\n\nNoen ganger ønsker vi at funksjonen skal si ifra om noe er litt rart eller feil. For at funksjonen skal stoppe bruker vi **`stop()`**. For at det skal gi et varsel bruker vi **`warning()`**.\n\nFor eksempel, her stopper funksjon om kommunenr kun er 2-siffer. Ved 3-siffer gis et varsel at en ledende 0 er lagt på.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlage_fylke <- function(kommunenr){\n  if (nchar(kommunenr) <= 2){\n    stop(\"Kommune nummer var ikke gjeldig.\")\n  }\n  if (nchar(kommunenr) == 3){\n    warning(\"Kommunenummer er lendge 3 og har blitt fylt med en ledende 0\\n\")\n    kommunenr <- paste(\"0\", kommunenr, sep = \"\")\n  }\n  fylke <- substr(kommunenr, 1, 2)\n  fylke\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlage_fylke(kommunenr = \"03\")\n```\n:::\n\n\n\n![](./images/error.PNG)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlage_fylke(kommunenr = \"301\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in lage_fylke(kommunenr = \"301\"): Kommunenummer er lendge 3 og har blitt fylt med en ledende 0\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"03\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlage_fylke(kommunenr = \"0301\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"03\"\n```\n:::\n:::\n",
    "supporting": [
      "funksjoner_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}