{
  "hash": "31bc1fcb8e53fa7f72b891305e29eaf3",
  "result": {
    "markdown": "---\ntitle: \"Funksjoner\"\neditor: visual\n---\n\n\n\n## Hva er en funksjon?\n\nEn funksjon er en del av kode som kan brukes om-og-om igjen. Den har en input (det som sendes inn til funksjonen) og en output (det som kommer ut).\n\n![](./images/funksjon1.PNG)\n\nParameter er tilleggsinformasjon som sendes inn til funksjonen for å spesifisere mer.\n\n![](./images/funksjon2.PNG)\n\nBruk av funksjoner kan være nyttig: - Gjenbruk - Abstraksjon (trenger ikke å vite hvordan)\n\n## Lage en enkel funksjon\n\nVi lager en funksjon ved å allokere det et navn og spesifisere `function()`. For eks\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmin_func <- function(){\n  print(\"hello\")\n}\n```\n:::\n\n\n\nOg etterpå kjøre vi funksjonen ved\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmin_func()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"hello\"\n```\n:::\n:::\n\n\n\n## Lage en funksjon for fylke\n\nHer skal vi lage en funksjon som ta kommunenummer som input og returnere fylkenummer. Vi spesifisere kommunenummer som en parameter i funksjonen. Vi bruker `substr()` for å plukke ut de første to siffer.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlage_fylke <- function(kommunenr){\n  substr(kommunenr, 1, 2)\n}\n\nlage_fylke(\"0301\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"03\"\n```\n:::\n:::\n\n\n\nFunksjoner kan gå over flere linjer. Den siste linjen er det som returneres. Det kan også spesifiseres med `return()` ved behov, særlig i kompleks funksjoner med multiple output.\n\n## Flere parameter\n\nFunksjoner kan ta mer enn èn paramter. For eksempel i fylke-funksjonen vi kanskje ønsker å sjekke lengde for å se om ledende 0-er har falt av.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlage_fylke <- function(kommunenr, sjekk_lengde){\n  if(sjekk_lengde == TRUE){\n    kommunenr <- ifelse(nchar(kommunenr) == 3, \n                        paste(\"0\", kommunenr, sep = \"\"), \n                        kommunenr)\n  }\n  fylke <- substr(kommunenr, 1, 2)\n  fylke\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlage_fylke(kommunenr = \"301\", sjekk_lengde = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"03\"\n```\n:::\n\n```{.r .cell-code}\nlage_fylke(kommunenr = \"301\", sjekk_lengde = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"30\"\n```\n:::\n:::\n\n\n\n## Standard/default parameter\n\nVi kan sett et parameter verdier for å slippe å spesifisere hver gang. For eksemepel, samme funksjon over kan har `sjekk_lengde=TRUE` som standard.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlage_fylke <- function(kommunenr, sjekk_lengde = TRUE){\n  if(sjekk_lengde == TRUE){\n    kommunenr <- ifelse(nchar(kommunenr) == 3, \n                        paste(\"0\", kommunenr, sep = \"\"), \n                        kommunenr)\n  }\n  fylke <- substr(kommunenr, 1, 2)\n  fylke\n}\n\nlage_fylke(\"301\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"03\"\n```\n:::\n:::\n\n\n\nNoen ganger kalles disse for \"named parameters\" eller \"keyword arguements\". Standard parameter alltid kommer til sist\n\n## Global vs Lokal-miljø\n\nNår vi lage en funksjon, lage vi en liten lokal-miljø. Varaiabler som lagres inn i en funksjon påvirke ikke global-miljø og er slettet når funksjonen er ferdig-kjørt. For eksempel om vi har en enkel function som returneres verdien av parameter `x` vil ikke dette påvirke om vi har en x i det global-miljøet:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfuncx <- function(x){\n  x\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 2\nfuncx(x = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\n\n## Varsling i funksjoner\n\nNoen ganger øsnker vi at funksjonen si ifra om noen er litt rart eller feil. For at funksjonen skal stoppe bruk **`stop()`**. For at det skal gi et varsel bruk **`warning()`**.\n\nFor eksempel, her stoppe funksjon om kommunenr er kun 2-siffer. Ved 3-siffer gis et varsel at en ledende 0 er lagt på.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlage_fylke <- function(kommunenr){\n  if (nchar(kommunenr) <= 2){\n    stop(\"Kommune nummer var ikke gjeldig.\")\n  }\n  if (nchar(kommunenr) == 3){\n    warning(\"Kommunenummer er lendge 3 og har blitt fylt med en ledende 0\\n\")\n    kommunenr <- paste(\"0\", kommunenr, sep = \"\")\n  }\n  fylke <- substr(kommunenr, 1, 2)\n  fylke\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlage_fylke(kommunenr = \"03\")\n```\n:::\n\n\n\n![](./images/error.PNG)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlage_fylke(kommunenr = \"301\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in lage_fylke(kommunenr = \"301\"): Kommunenummer er lendge 3 og har blitt fylt med en ledende 0\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"03\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlage_fylke(kommunenr = \"0301\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"03\"\n```\n:::\n:::\n",
    "supporting": [
      "funksjoner_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}